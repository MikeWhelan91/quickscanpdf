import React,{createContext,useContext,useEffect,useMemo,useState}from'react';import * as FileSystem from 'expo-file-system';export type SavedScan={id:string;createdAt:number;pages:number;pdfUri:string;name:string};type Store={scans:SavedScan[];refresh:()=>Promise<void>;addScan:(s:SavedScan)=>Promise<void>};const DIR=FileSystem.documentDirectory+'quickscanpdf_scans/';const INDEX=DIR+'index.json';const C=createContext<Store|null>(null);export const ScansProvider:React.FC<{children:React.ReactNode}>=({children})=>{const[scans,setScans]=useState<SavedScan[]>([]);const ensure=async()=>{const info=await FileSystem.getInfoAsync(DIR);if(!info.exists)await FileSystem.makeDirectoryAsync(DIR,{intermediates:true});};const refresh=async()=>{await ensure();const info=await FileSystem.getInfoAsync(INDEX);if(!info.exists){setScans([]);return;}const txt=await FileSystem.readAsStringAsync(INDEX);try{setScans((JSON.parse(txt)as SavedScan[]).sort((a,b)=>b.createdAt-a.createdAt));}catch{setScans([]);}};const persist=async(list:SavedScan[])=>{await ensure();await FileSystem.writeAsStringAsync(INDEX,JSON.stringify(list));};const addScan=async(scan:SavedScan)=>{const next=[scan,...scans];setScans(next);await persist(next);};useEffect(()=>{refresh();},[]);const api:Store=useMemo(()=>({scans,refresh,addScan}),[scans]);return <C.Provider value={api}>{children}</C.Provider>};export const useScansStore=()=>{const c=useContext(C);if(!c)throw new Error('ScansStore missing');return c};