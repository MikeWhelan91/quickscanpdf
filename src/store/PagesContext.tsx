import React,{createContext,useContext,useMemo,useState}from'react';export type Page={id:string;uri:string;rotation:number};type Ctx={pages:Page[];addPage:(p:Page)=>void;removePage:(id:string)=>void;clear:()=>void;rotateRight:(id:string)=>void;moveUp:(id:string)=>void;moveDown:(id:string)=>void;};const C=createContext<Ctx|null>(null);export const PagesProvider:React.FC<{children:React.ReactNode}>=({children})=>{const[pages,setPages]=useState<Page[]>([]);const api:Ctx=useMemo(()=>({pages,addPage:(p)=>setPages(x=>[...x,p]),removePage:(id)=>setPages(x=>x.filter(p=>p.id!==id)),clear:()=>setPages([]),rotateRight:(id)=>setPages(x=>x.map(p=>p.id===id?{...p,rotation:(p.rotation+90)%360}:p)),moveUp:(id)=>setPages(x=>{const i=x.findIndex(p=>p.id===id);if(i<=0)return x;const a=[...x];const[it]=a.splice(i,1);a.splice(i-1,0,it);return a;}),moveDown:(id)=>setPages(x=>{const i=x.findIndex(p=>p.id===id);if(i<0||i>=x.length-1)return x;const a=[...x];const[it]=a.splice(i,1);a.splice(i+1,0,it);return a;})}),[pages]);return <C.Provider value={api}>{children}</C.Provider>};export const usePages=()=>{const c=useContext(C);if(!c)throw new Error('PagesContext missing');return c};